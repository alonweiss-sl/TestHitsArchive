{
    "version": "0.2.0",
    "configurations": [
        {
            "name": "Launch",
            "type": "node",
            "request": "launch",
            "program": "${workspaceRoot}/tsOutputs/main.js",
            "stopOnEntry": false,
            "args": [
                "C:\\projects\\sealights\\config.json"
            ],
            "cwd": "${workspaceRoot}",
            "runtimeExecutable": null,
            "runtimeArgs": [
                "--nolazy"
            ],
            "sourceMaps": true,
            "outFiles": [
                "${workspaceRoot}/tsOutputs/**/*.js"
            ]
        },
        {
            "name": "Attach",
            "type": "node",
            "request": "attach",
            "port": 5858
        },
        {
            "name": "Debug mocha",
            // Type of configuration. Possible values: "node", "mono".
            "type": "node",
            // Workspace relative or absolute path to the program.
            "program": "${workspaceRoot}/node_modules/mocha/bin/_mocha",
            // Automatically stop program after launch.
            "stopOnEntry": false,
            // Command line arguments passed to the program.
            "args": [
                "tsOutputs/test/unitTest",
                "--recursive"
            ],
            // Workspace relative or absolute path to the working directory of the program being debugged. Default is the current workspace.
            "cwd": "${workspaceRoot}",
            // Workspace relative or absolute path to the runtime executable to be used. Default is the runtime executable on the PATH.
            "runtimeExecutable": null,
            // Environment variables passed to the program.
            "env": {
                "NODE_ENV": "production"
            },
            "request": "launch",
            "runtimeArgs": [
                "--nolazy"
            ],
            "sourceMaps": true,
            "outDir": "${workspaceRoot}/tsOutputs"
        },
        {
            "name": "Run mocha tests with istanbul",
            "type": "node",
            "request": "launch",
            "program": "${workspaceRoot}/node_modules/istanbul/lib/cli.js",
            "stopOnEntry": false,
            "args": [
                "cover",
                "--include-all-sources",
                "node_modules/mocha/bin/_mocha",
                "--",
                "tsOutputs/test/unitTest",
                "--recursive"
            ],
            "cwd": "${workspaceRoot}",
            "runtimeExecutable": null,
            "runtimeArgs": [
                "--nolazy"
            ],
            "env": {
                "NODE_ENV": "development"
            },
            "externalConsole": false,
            "sourceMaps": true,
            "outDir": "${workspaceRoot}/tsOutputs"
        },
        {
            "name": "Debug mocha (Component tests)",
            // Type of configuration. Possible values: "node", "mono".
            "type": "node",
            // Workspace relative or absolute path to the program.
            "program": "${workspaceRoot}/node_modules/mocha/bin/_mocha",
            // Automatically stop program after launch.
            "stopOnEntry": false,
            // Command line arguments passed to the program.
            "args": [
                "tsOutputs/test/componentTest",
                "--recursive"
            ],
            // Workspace relative or absolute path to the working directory of the program being debugged. Default is the current workspace.
            "cwd": "${workspaceRoot}",
            // Workspace relative or absolute path to the runtime executable to be used. Default is the runtime executable on the PATH.
            "runtimeExecutable": null,
            // Environment variables passed to the program.
            "env": {
                "NODE_ENV": "production"
            },
            "request": "launch",
            "runtimeArgs": [
                "--nolazy"
            ],
            "sourceMaps": true,
            "outDir": "${workspaceRoot}/tsOutputs",
            "windows": {
                "console": "internalConsole"
            }
        }
    ]
}